//QUESTÃO 1

/*
    O trecho de código abaixo mostra uma rota para criar e listar usuários. No entanto, ele está no Nível 1 do modelo de maturidade 
    e precisa ser ajustado para o Nível 2.
*/

app.post('/users/create',(req, res)=>{              //app.post('/create',(req, res)=>{
    constnewUser={ id:users.length+1,...req.body};
    users.push(newUser);
    res.status(201).json(newUser);
});
    
app.get('/users/getAll',(req, res)=>{               //app.get('/users', (req, res) => {})
    res.status(200).json(users);
});
   
//a) Qual é o problema com o uso das rotas acima?
/*
    R: Esta entrando em muitas rotas para realizar uma tarefa mais simples.
    Tambem nao tem mensagem de retorno de erro
*/

//b) Explique como o código pode ser ajustado para se adequar ao Nível 2.
/*
    R: Ali no post, poderia ser so create. E no get poderia ser sem getAll
*/

//C) Corrija o código
/*
    app.post('/users',(req, res)=>{              
        const newUser = { id:users.length+1,...req.body};
        users.push(newUser);
        res.status(201).json(newUser);

    app.get('/users',(req, res)=>{              
        res.status(200).json(users);
});
*/



//QUESTÃO 2
/*
    O código abaixo tenta implementar a exclusão de um usuário específico
    mas não atende aos requisitos de uso correto de códigos de status HTTP.
*/

app.delete('/users/:id',(req, res)=>{
    const id = parseInt(req.params.id);
    const userIndex = users.findIndex(user => user.id === id);
    if(userIndex !== -1){
        users.splice(userIndex , 1);
        res.json({message:'Usuário excluído'});
    } else {
        res.json({message:'Usuário não encontrado'});
    }
});

//a) Identifique o problema com os códigos de status HTTP usados no código.
/*
    R: O uso incorreto do .json deixa o codigo mais baguncado, o uso ideal seria
    o .stats para relatar se o usuario foi excluido e nao encontrado

*/

//b) Corrija o código, adicionando os status HTTP adequados para uma resposta RESTful.
/*
    app.delete('/users/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const index = users.findIndex(user => user.id === id);
    if(Index !== -1) {                                         
        users.splice(userIndex, 1);
        res.status(200).json({mensage: "Usuário excluído"});
    } else {
        res.status(404).json({mensage: "Usuário não encontrado});
    }
})
*/



//QUESTÃO 3
/*
    Abaixo, há uma rota para atualizar um usuário existente. Porém, 
    o código não diferencia uma atualização parcial de uma atualização completa.

*/ 
app.put('/users/:id',(req, res)=>{
    const id =parseInt(req.params.id);
    const user=users.find(user=> user.id === id);
    if(user){
        user.name = req.body.name;
        res.status(200).json(user);
    }else{
        res.status(404).json({message:'Usuário não encontrado'});
    }
});


//A) Explique a diferença entre os métodos PUT e PATCH em uma API REST.
/*
    R: PUT atualiza todo o recurso por inteiro, enquanto o PATCH atualiza
    parcialmente.
*/

//b) Corrija o código acima, implementando uma rota PATCH para permitir atualizações parciais.
/*
    app.patch('/Users/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const index = users.findIndex(user => user.id === id);

    if (index !== -1){
        users[index] = {...users[index], ...req.body};      
        res.status(200).json(users[index]);
    } else {
       res.status(404).json({message: 'Usuário não encontrado'});
    }
})
/*



//QUESTÃO 4
/*
    A resposta da API no trecho abaixo não inclui hipermídia (HATEOAS), 
    necessária para atingir o Nível 3 do modelo de maturidade de Richardson.
*/

app.get('/users/:id',(req, res)=>{
    const id =parseInt(req.params.id);
    const user=users.find(user=> user.id === id);
    if(user){
        res.status(200).json(user);
    }else{
        res.status(404).json({message:'Usuário não encontrado'});
    }
});

//a) Explique o que é HATEOAS e por que ele é importante no modelo REST.
/*
    R: HATEOAS (Hypermedia as the Engine of Application State) é um método que permite a criação de links dinâmicos, 
    tornando a API mais intuitiva e acessível, mesmo para pessoas sem conhecimento prévio. Essa abordagem é importante porque dá à API 
    um propósito claro, permitindo que os usuários naveguem facilmente entre os recursos. Ao incluir links que orientam os usuários, 
    HATEOAS facilita a interação com a API, tornando a navegação sobre os recursos possível e compreensível.
*/

//b) Altere o código para incluir links HATEOAS na resposta da API.

    app.get('/users/:id',(req, res)=>{
    const id =parseInt(req.params.id);
    const user = users.find(user=> user.id === id);
    if(user){
        res.status(200).json({user,
            links: generateUserLinks(User)
    });
    }else{
        res.status(404).json({message:'Usuário não encontrado'});
    }
});



//QUESTÃO 5
/*
    Observe o código abaixo, que faz uma busca por um usuário específico. 
    Identifique o problema relacionado à validação e segurança.
*/

app.get('/users/:id',(req, res)=>{
    const id = req.params.id;
    const user = users.find(user=> user.id === id);
    if(user){
        res.status(200).json(user);
    }else{
        res.status(404).json({message:'Usuário não encontrado'});
    }
});

//a) Qual é o problema relacionado à validação nesse código?
/*
    O problema relacionado validação e segurança esta no if, onde o user tem que colocar uma medida
    !== -1 no lado dele, e na hora de achar, apenas colocar users.findIndex
*/


//b) Corrija o código para incluir a validação adequada.

app.get('/users/:id',(req, res)=>{
    const id = req.params.id;
    const user = users.findIndex(user=> user.id === id);
    if(user !== -1){
        res.status(200).json(user);
    }else{
        res.status(404).json({message:'Usuário não encontrado'});
    }
});


//QUESTÃO 6
/*
    Abaixo temos uma rota que adiciona um novo usuário, mas não faz validação do corpo da requisição.
*/

app.post('/users',(req, res)=>{
    constnewUser = { id:users.length + 1,...req.body};
    users.push(newUser);
    res.status(201).json(newUser);
});

//a) Qual é o problema de segurança com a falta de validação no corpo da requisição?
/*
    R: Ele nao estava pegando a variavel const users, ou seja, nao estava criando uma requisição
    do body, ai  isso seria o problema na seguranca da validacao do corpo
*/

//b) Corrija o código para validar se o campo name está presente e atende a 
//requisitos básicos, como ser uma string com pelo menos 3 caracteres.

app.post('/users', (req, res) => {
    const {users} = req.body;
    if (!users || typeof users !== 'string' || users.length < 3){
        return res.status(400).json({error:'o campo users devera ser uma string com no minimo 3 caracteres.'})
    }
    const newUser = { id: users.length + 1, ...req.body };
    users.push(newUser);
    res.status(201).json(newUser);
});
    
